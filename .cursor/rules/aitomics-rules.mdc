---
description: 
globs: 
alwaysApply: true
---
# Aitomics Library Rules

## Core Concepts

### Callers and Responses
- Always use `$` for creating LLM callers and `_` for utility functions
- Each caller must have a unique ID (either provided or auto-generated)
- Responses maintain a linked list structure for tracing transformations
- Use `Response.create()` for external data integration

### Response Structure
```javascript
{
  output: String | Object,
  caller: Caller,
  input: String | Response,
  generator: generatingType, // INPUT, PROGRAMMATIC, CUSTOM
  root: boolean,
  level: number
}
```

### Comparison Models
- Use `EqualComparisonModel` for exact matches
- Use `DistanceComparisonModel` for similarity-based comparison
- Use `KrippendorffsComparisonModel` for single-label IRR
- Use `CohensComparisonModel` for multi-label IRR

### Utility Functions
- Basic utilities: `_.lowerCase`, `_.upperCase`, `_.stringToJSON`, `_.JSONToString`, `_.extract`
- Analysis utilities: `_.inference`, `_.confidence`
- Custom utilities can be created using `createUtilityAnalysisCaller`

## Best Practices

### Caller Creation
```javascript
// Good: Named caller
const caller = $("Transform text", "unique-name")

// Good: Programmatic caller
const caller = $((input) => input.toUpperCase(), "uppercase-transformer")

// Bad: Unnamed duplicate callers
const caller1 = $("Transform text")
const caller2 = $("Transform text") // Will throw error
```

### Response Handling
```javascript
// Good: Chaining transformations
const result = await _.compose(caller1, caller2).run(input)

// Good: Accessing previous transformations
const prevResult = result.input

// Good: Creating from external data
const response = Response.create({
  output: "External data",
  input: "Original input"
})
```

### Comparison Usage
```javascript
// Good: Basic comparison (single response)
const comparison = result2.compare(result1).run(new EqualComparisonModel())

// Good: Distance-based comparison (single response)
const orderedList = ["very_bad", "bad", "neutral", "good", "very_good"]
const maxDistance = 1
const weightFn = (k, l) => {
  if (k === l) return 1;
  const kIndex = orderedList.indexOf(k);
  const lIndex = orderedList.indexOf(l);
  if (kIndex === -1 || lIndex === -1) return 0;
  const dist = Math.abs(kIndex - lIndex);
  return dist <= maxDistance ? 0.5 : 0;
}
const comparison = result2.compare(result1).run(new DistanceComparisonModel(maxDistance, orderedList, weightFn))

// Good: Multi-response comparison with Krippendorff's Alpha (single label)
const reviewer1 = [response1, response3]
const reviewer2 = [response2, response4]
const possibleLabels = ["positive", "negative", "neutral"]
const weightFn = (k, l) => k === l ? 1 : 0
const comparison = ComparisonModel.compareMultiple(
  reviewer1, 
  reviewer2, 
  new KrippendorffsComparisonModel(possibleLabels, weightFn)
)

// Good: Multi-response comparison with Cohen's Kappa (multiple labels)
const reviewer1 = [response1, response3]
const reviewer2 = [response2, response4]
const valueToCheck = "positive"
const comparison = ComparisonModel.compareMultiple(
  reviewer1, 
  reviewer2, 
  new CohensComparisonModel(valueToCheck)
)
```

### Visualization
- Always provide meaningful names for callers
- Use `Response.create()` with custom names for better visualization
- Avoid duplicate caller names
- Consider using `showExampleData` for complex flows

```javascript
import { generateFlowDiagram } from 'aitomics'

// Create responses with named callers
const caller1 = $("First transformation", "step1")
const caller2 = $("Second transformation", "step2")
const result1 = await caller1.run(input)
const result2 = await caller2.run(input)

// Create another flow with different transformations
const caller3 = $("Alternative transformation", "alt-step1")
const caller4 = $("Final transformation", "alt-step2")
const result3 = await caller3.run(input)
const result4 = await caller4.run(input)

// Generate flow diagram with multiple flows
const { markdown, diagram } = await generateFlowDiagram(
  [
    [result1, result2], // First flow
    [result3, result4]  // Second flow
  ],
  {
    labels: ["Main Flow", "Alternative Flow"],
    showExampleData: true,
    initialInputIndex: 0
  }
)

// Save the diagram
fs.writeFileSync("flow-diagram.svg", diagram)
```

## Configuration Templates

### YAML Configuration
```yaml
# config.yml
model: llama-3.2-3b-instruct  # The model name to use
path: https://127.0.0.1       # The base URL for the LLM API
port: 1234                    # The port number
endpoint: v1/chat/completions # The API endpoint
settings:
  temperature: 0.7            # Controls randomness (0.0 to 1.0)
  max_tokens: -1              # Maximum tokens to generate (-1 for unlimited)
  stream: false               # Whether to stream the response
```

### Object Configuration
```javascript
// config.js
const config = {
    model: "llama-3.2-3b-instruct",
    path: "https://127.0.0.1",
    port: 1234,
    endpoint: "v1/chat/completions",
    settings: {
        temperature: 0.7,
        max_tokens: -1,
        stream: false
    }
}

// Usage
import { setConfigFromObject } from 'aitomics'
setConfigFromObject(config)
```

### Prompt Configuration
```yaml
# prompt.yml
prompt:
    description:
        - multiple lines of prompt content
        - can go here
    values:
        - label: myLabel
          description: a description of the label
        - label: otherLabel
          description: another description of label
    default_value: unknown
```

## Project Structure

### Setup Phase
```javascript
// Configure LLM settings
import { setConfigFromFile } from 'aitomics'
setConfigFromFile("./config.yml")

// Define core transformation callers
const textCleaner = $("Clean and normalize text", "text-cleaner")
const sentimentAnalyzer = $("Analyze sentiment", "sentiment-analyzer")
const topicExtractor = $("Extract main topics", "topic-extractor")

// Define utility callers
const customAnalyzer = createUtilityAnalysisCaller({
  name: "custom-analysis",
  variable: "analysis",
  prompt: "Your custom analysis prompt"
})

// Define analysis chains
const analysisChain = _.compose(
  textCleaner,
  sentimentAnalyzer,
  topicExtractor,
  customAnalyzer
)
```

### Data Loading Phase
```javascript
// Load external data as responses
const externalData = Response.create({
  output: "External data content",
  input: "Original source"
})

// Create comparison baseline if needed
const baselineResponse = Response.create({
  output: "Baseline data",
  input: "Original source",
  name: "Baseline"
})
```

### Execution Phase
```javascript
// Process data with progress updates
console.log("Starting analysis...")
const results = []
for (const item of dataItems) {
  console.log(`Processing item ${item.id}...`)
  const result = await analysisChain.run(item)
  results.push(result)
  
  // Optional: Save intermediate results
  writeResponses(`results_${item.id}.json`, result)
  
  // Optional: Compare with baseline during processing
  const comparison = result.compare(baselineResponse)
    .run(new DistanceComparisonModel(1, ["low", "medium", "high"]))
  console.log(`Agreement with baseline: ${comparison}`)
}
```

### Finalization Phase
```javascript
// Save final results
writeResponses("final_results.json", results)

// Generate and save visualization
const { diagram } = await generateFlowDiagram(
  [results],
  {
    labels: ["Analysis Flow"],
    showExampleData: true
  }
)
fs.writeFileSync("analysis-flow.svg", diagram)

// Optional: Generate comparison report
const finalComparison = ComparisonModel.compareMultiple(
  results,
  baselineResults,
  new KrippendorffsComparisonModel(["positive", "negative", "neutral"], (k, l) => k === l ? 1 : 0)
)
console.log("Final agreement score:", finalComparison)
```

## Best Practices

### Setup Phase
- Define all callers with meaningful names
- Group related transformations into chains
- Configure LLM settings before any execution

### Data Loading
- Use `Response.create()` for external data
- Maintain proper input/output chains
- Name responses meaningfully for visualization

### Execution
- Provide progress updates
- Save intermediate results
- Perform comparisons during processing
- Handle errors gracefully

### Finalization
- Save all results
- Generate visualizations
- Create comparison reports
- Clean up temporary data 